type Query {
  songsByName(name: String, first: Int, after: String): SongConnection!
  songById(id: String!): Song!
  artistsByName(name: String, first: Int, after: String): ArtistConnection!
  artistById(id: String, first: Int, after: String): Artist!
  queue: [QueueItem!]!
  history(first: Int, after: String): HistoryConnection!
}

type Mutation {
  queueSong(song: SongInput!, streamingUrlIdx: Int!): Int!
  popSong: QueueItem
  removeSong(songId: String!, timestamp: String!): Boolean!
}

type Subscription {
  queueChanged: [QueueItem!]!
  queueAdded: QueueItem!
}

type HistoryItem {
  song: Song!
  playDate: String!
}

type HistoryConnection {
  edges: [HistoryEdge!]!
  pageInfo: HistoryPageInfo!
}

type HistoryEdge {
  node: HistoryItem!
  cursor: String!
}

type HistoryPageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Artist {
  id: ID!
  name: String!
  nameYomi: String!
  songCount: Int!
  songs(first: Int, after: String): SongConnection!
}

type ArtistConnection {
  edges: [ArtistEdge!]!
  pageInfo: ArtistPageInfo!
}

type ArtistEdge {
  node: Artist!
  cursor: String!
}

type ArtistPageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

enum VocalType {
  NORMAL
  GUIDE_MALE
  GUIDE_FEMALE
}

type Song {
  id: ID!
  name: String!
  nameYomi: String!
  artistName: String!
  artistNameYomi: String!
  lyricsPreview: String
  vocalTypes: [VocalType!]!
  streamingUrls: [StreamingUrlInfo!]!
  scoringData: [Int!]!
  tieUp: String
  playtime: Int
}

input SongInput {
  id: String!
  name: String!
  artistName: String!
  playtime: Int
}

type SongConnection {
  edges: [SongEdge!]!
  pageInfo: SongPageInfo!
}

type SongEdge {
  node: Song!
  cursor: String!
}

type SongPageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type StreamingUrlInfo {
  url: String!
}

type QueueItem {
  song: Song!
  timestamp: String!
  streamingUrlIdx: Int!
}
