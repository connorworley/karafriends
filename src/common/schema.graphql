type Query {
  adhocLyrics(id: String!): [String!]
  artistById(id: String, first: Int, after: String): Artist!
  artistsByName(name: String, first: Int, after: String): ArtistConnection!
  currentSong: QueueItem
  history(first: Int, after: String): HistoryConnection!
  joysoundArtistsByKeyword(
    keyword: String
    first: Int
    after: String
  ): JoysoundArtistConnection!
  joysoundSongDetail(id: String): JoysoundSong!
  joysoundSongsByArtist(
    artistId: String
    first: Int
    after: String
  ): JoysoundSongConnection!
  joysoundSongsByKeyword(
    keyword: String
    first: Int
    after: String
  ): JoysoundSongConnection!
  nicoVideoInfo(videoId: String): NicoVideoInfoResult!
  playbackState: PlaybackState!
  queue: [QueueItem!]!
  songById(id: String!): Song!
  songsByName(name: String, first: Int, after: String): SongConnection!
  videoDownloadProgress(
    videoDownloadType: Int!
    songId: String!
    suffix: String
  ): VideoDownloadProgress!
  youtubeVideoInfo(videoId: String): YoutubeVideoInfoResult!
}

type Mutation {
  # Maybe we can merge these queue endpoints once Input Unions become real
  # https://github.com/graphql/graphql-spec/issues/488
  sendEmote(emote: EmoteInput!): Boolean!
  popAdhocLyrics: Boolean!
  popSong: QueueItem
  pushAdhocLyrics(input: PushAdhocLyricsInput): Boolean!
  queueDamSong(input: QueueDamSongInput): QueueSongResult!
  queueJoysoundSong(input: QueueJoysoundSongInput): QueueSongResult!
  queueYoutubeSong(input: QueueYoutubeSongInput): QueueSongResult!
  queueNicoSong(input: QueueNicoSongInput): QueueSongResult!
  removeSong(songId: String!, timestamp: String!): Boolean!
  setPlaybackState(playbackState: PlaybackState!): Boolean!
}

type Subscription {
  currentSongAdhocLyricsChanged: [AdhocLyricsEntry!]!
  currentSongChanged: QueueItem
  emote: Emote!
  playbackStateChanged: PlaybackState!
  queueAdded: QueueItem!
  queueChanged: SubscriptionQueueChanged!
}

type SubscriptionQueueChanged {
  currentSong: QueueItem
  newQueue: [QueueItem!]!
}

type AdhocLyricsEntry {
  lyric: String!
  lyricIndex: Int!
}

type HistoryItem {
  song: Song!
  playDate: String!
}

type HistoryConnection {
  edges: [HistoryEdge!]!
  pageInfo: HistoryPageInfo!
}

type HistoryEdge {
  node: HistoryItem!
  cursor: String!
}

type HistoryPageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type Artist {
  id: ID!
  name: String!
  nameYomi: String!
  songCount: Int!
  songs(first: Int, after: String): SongConnection!
}

type ArtistConnection {
  edges: [ArtistEdge!]!
  pageInfo: ArtistPageInfo!
}

type ArtistEdge {
  node: Artist!
  cursor: String!
}

type ArtistPageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type JoysoundArtist {
  id: ID!
  name: String!
}

type JoysoundArtistConnection {
  edges: [JoysoundArtistEdge!]!
  pageInfo: ArtistPageInfo!
}

type JoysoundArtistEdge {
  node: JoysoundArtist!
  cursor: String!
}

enum VocalType {
  NORMAL
  GUIDE_MALE
  GUIDE_FEMALE
  UNKNOWN
}

type Song {
  id: ID!
  name: String!
  nameYomi: String!
  artistName: String!
  artistNameYomi: String!
  lyricsPreview: String
  vocalTypes: [VocalType!]!
  streamingUrls: [StreamingUrlInfo!]!
  scoringData: [Int!]!
  tieUp: String
  playtime: Int
}

type JoysoundSong {
  id: ID!
  name: String!
  artistName: String!
  lyricsPreview: String
  tieUp: String
}

type Emote {
  nickname: String!
  emote: String!
}

type UserIdentity {
  nickname: String!
  deviceId: String!
}

input UserIdentityInput {
  nickname: String!
  deviceId: String!
}

input EmoteInput {
  userIdentity: UserIdentityInput!
  emote: String!
}

input QueueDamSongInput {
  songId: String!
  name: String!
  artistName: String!
  playtime: Int
  streamingUrlIdx: Int!
  userIdentity: UserIdentityInput!
}

input QueueJoysoundSongInput {
  songId: String!
  name: String!
  artistName: String!
  playtime: Int
  userIdentity: UserIdentityInput!
  isRomaji: Boolean!
  youtubeVideoId: String
}

input QueueYoutubeSongInput {
  songId: String!
  name: String!
  artistName: String!
  playtime: Int
  userIdentity: UserIdentityInput!
  adhocSongLyrics: String
  captionCode: String
  gainValue: Float!
}

input QueueNicoSongInput {
  songId: String!
  name: String!
  artistName: String!
  playtime: Int
  userIdentity: UserIdentityInput!
}

type SongConnection {
  edges: [SongEdge!]!
  pageInfo: SongPageInfo!
}

type JoysoundSongConnection {
  edges: [JoysoundSongEdge!]!
  pageInfo: SongPageInfo!
}

type SongEdge {
  node: Song!
  cursor: String!
}

type JoysoundSongEdge {
  node: JoysoundSong!
  cursor: String!
}

type SongPageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type StreamingUrlInfo {
  url: String!
}

input PushAdhocLyricsInput {
  lyric: String!
  lyricIndex: Int!
}

interface QueueItemInterface {
  songId: String!
  name: String!
  artistName: String!
  playtime: Int
  timestamp: String!
  userIdentity: UserIdentity!
}

type DamQueueItem implements QueueItemInterface {
  songId: String!
  name: String!
  artistName: String!
  streamingUrls: [StreamingUrlInfo!]!
  scoringData: [Int!]!
  playtime: Int
  timestamp: String!
  userIdentity: UserIdentity!
  streamingUrlIdx: Int!
}

type JoysoundQueueItem implements QueueItemInterface {
  songId: String!
  name: String!
  artistName: String!
  playtime: Int
  timestamp: String!
  userIdentity: UserIdentity!
  isRomaji: Boolean!
  youtubeVideoId: String
}

type YoutubeQueueItem implements QueueItemInterface {
  songId: String!
  name: String!
  artistName: String!
  playtime: Int
  timestamp: String!
  userIdentity: UserIdentity!
  hasAdhocLyrics: Boolean!
  hasCaptions: Boolean!
  gainValue: Float!
}

type NicoQueueItem implements QueueItemInterface {
  songId: String!
  name: String!
  artistName: String!
  playtime: Int
  timestamp: String!
  userIdentity: UserIdentity!
}

union QueueItem =
    DamQueueItem
  | JoysoundQueueItem
  | YoutubeQueueItem
  | NicoQueueItem

type QueueSongInfo {
  eta: Int!
}

type QueueSongError {
  reason: String!
}

union QueueSongResult = QueueSongInfo | QueueSongError

type CaptionLanguage {
  code: String!
  name: String!
}

interface VideoInfo {
  author: String!
  channelId: String!
  lengthSeconds: Int!
  description: String!
  title: String!
  viewCount: Int!
}

type YoutubeVideoInfo implements VideoInfo {
  author: String!
  captionLanguages: [CaptionLanguage!]!
  channelId: String!
  keywords: [String!]
  lengthSeconds: Int!
  description: String!
  title: String!
  viewCount: Int!
  gainValue: Float!
}

type YoutubeVideoInfoError {
  reason: String!
}

union YoutubeVideoInfoResult = YoutubeVideoInfo | YoutubeVideoInfoError

type NicoVideoInfo implements VideoInfo {
  author: String!
  channelId: String!
  lengthSeconds: Int!
  description: String!
  title: String!
  thumbnailUrl: String!
  viewCount: Int!
}

type NicoVideoInfoError {
  reason: String!
}

union NicoVideoInfoResult = NicoVideoInfo | NicoVideoInfoError

enum PlaybackState {
  PAUSED
  PLAYING
  RESTARTING
  SKIPPING
  WAITING
}

type VideoDownloadProgress {
  progress: Float!
}
