type Query {
  songsByName(name: String, first: Int, after: String): SongConnection!
  songById(id: String!): Song!
  artistsByName(name: String): [Artist!]!
  artistById(id: String!): Artist!
  queue: [QueueItem!]!
}

type Mutation {
  queueSong(song: SongInput!): Boolean!
  popSong: QueueItem
  removeSong(songId: String!, timestamp: String!): Boolean!
}

type Subscription {
  queueChanged: [QueueItem!]!
  queueAdded: QueueItem!
}

type Artist {
  id: ID!
  name: String!
  nameYomi: String!
  songCount: Int!
  songs: [Song!]!
}

type Song {
  id: ID!
  name: String!
  nameYomi: String!
  artistName: String!
  artistNameYomi: String!
  lyricsPreview: String
  streamingUrls: [String!]!
  scoringData: [Int!]!
}

input SongInput {
  id: String!
  name: String!
  nameYomi: String!
  artistName: String!
  artistNameYomi: String!
  lyricsPreview: String
}

type SongConnection {
  edges: [SongEdge!]!
  pageInfo: SongPageInfo!
}

type SongEdge {
  node: Song!
  cursor: String!
}

type SongPageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

type QueueItem {
  song: Song!
  timestamp: String!
}
